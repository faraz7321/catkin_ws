// Generated by gencpp from file beginner_tutorials/WaveForm.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_WAVEFORM_H
#define BEGINNER_TUTORIALS_MESSAGE_WAVEFORM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct WaveForm_
{
  typedef WaveForm_<ContainerAllocator> Type;

  WaveForm_()
    : period(0.0)
    , magnitude(0.0)
    , phase(0.0)  {
    }
  WaveForm_(const ContainerAllocator& _alloc)
    : period(0.0)
    , magnitude(0.0)
    , phase(0.0)  {
  (void)_alloc;
    }



   typedef double _period_type;
  _period_type period;

   typedef double _magnitude_type;
  _magnitude_type magnitude;

   typedef double _phase_type;
  _phase_type phase;





  typedef boost::shared_ptr< ::beginner_tutorials::WaveForm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::WaveForm_<ContainerAllocator> const> ConstPtr;

}; // struct WaveForm_

typedef ::beginner_tutorials::WaveForm_<std::allocator<void> > WaveForm;

typedef boost::shared_ptr< ::beginner_tutorials::WaveForm > WaveFormPtr;
typedef boost::shared_ptr< ::beginner_tutorials::WaveForm const> WaveFormConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::WaveForm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::WaveForm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::WaveForm_<ContainerAllocator1> & lhs, const ::beginner_tutorials::WaveForm_<ContainerAllocator2> & rhs)
{
  return lhs.period == rhs.period &&
    lhs.magnitude == rhs.magnitude &&
    lhs.phase == rhs.phase;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::WaveForm_<ContainerAllocator1> & lhs, const ::beginner_tutorials::WaveForm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::WaveForm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::WaveForm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::WaveForm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::WaveForm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::WaveForm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::WaveForm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::WaveForm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deb412a7e1a8dc5c76861766bd0a5ede";
  }

  static const char* value(const ::beginner_tutorials::WaveForm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdeb412a7e1a8dc5cULL;
  static const uint64_t static_value2 = 0x76861766bd0a5edeULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::WaveForm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/WaveForm";
  }

  static const char* value(const ::beginner_tutorials::WaveForm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::WaveForm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 period\n"
"float64 magnitude\n"
"float64 phase\n"
;
  }

  static const char* value(const ::beginner_tutorials::WaveForm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::WaveForm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.period);
      stream.next(m.magnitude);
      stream.next(m.phase);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaveForm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::WaveForm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::WaveForm_<ContainerAllocator>& v)
  {
    s << indent << "period: ";
    Printer<double>::stream(s, indent + "  ", v.period);
    s << indent << "magnitude: ";
    Printer<double>::stream(s, indent + "  ", v.magnitude);
    s << indent << "phase: ";
    Printer<double>::stream(s, indent + "  ", v.phase);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_WAVEFORM_H
